AWSTemplateFormatVersion: "2010-09-09"
Description: "Pipeline resources of load test"
Parameters:
  ParentStackName:
    Type: "String"
  SourceCodeRepositoryName:
    Type: "String"
  ArtifactRepositoryName:
    Type: "String"
  RunLoadTestProjectName:
    Type: "String"
  ClusterName:
    Type: "String"
  ServerContainerImageRepository:
    Type: "String"
  ClientContainerImageRepository:
    Type: "String"
  BuildServerContainerProjectName:
    Type: "String"
  BuildClientContainerProjectName:
    Type: "String"
  JMeterServerTaskName:
    Type: "String"
  JMeterClientTaskName:
    Type: "String"
  RuntimeStackName:
    Type: "String"
Mappings:
  CONSTRAINTS:
    CODEPIPELINE:
      SERVICEROLEPOLICYNAME: "LoadTestingCodePipelineServiceRolePolicy"
Resources:
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactRepositoryName
        Type: S3
      Name: !Join [ "-", [ !Ref ParentStackName, "Load-Testing", "Pipeline" ] ]
      RestartExecutionOnUpdate: 'false'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: "Source"
          Actions:
            - Name: "Source"
              ActionTypeId:
                Category: "Source"
                Owner: "AWS"
                Provider: "S3"
                Version: "1"
              OutputArtifacts:
                - Name: "Source"
              Configuration:
                S3Bucket: !Ref SourceCodeRepositoryName
                S3ObjectKey: "load-test.zip"
        - Name: "Build"
          Actions:
            - Name: "BuildJMeterServerContainer"
              InputArtifacts:
                - Name: "Source"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Version: "1"
                Provider: "CodeBuild"
              Configuration:
                ProjectName: !Ref BuildServerContainerProjectName
              RunOrder: "1"
              OutputArtifacts:
                - Name: "JMeterServerContainerBuild"
            - Name: "BuildJMeterClientContainer"
              InputArtifacts:
                - Name: "Source"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Version: "1"
                Provider: "CodeBuild"
              Configuration:
                ProjectName: !Ref BuildClientContainerProjectName
              RunOrder: "1"
              OutputArtifacts:
                - Name: "JMeterClientContainerBuild"
        #- Name: "Deploy"
        #  Actions:
        #    - Name: "DeployJMeterServerContainers"
        #      InputArtifacts:
        #        - Name: "Source"
        #      ActionTypeId:
        #        Category: "Deploy"
        #        Owner: "AWS"
        #        Provider: "CloudFormation"
        #        Version: "1"
        #      Configuration:
        #        ActionMode: "CREATE_UPDATE"
        #        StackName: !Ref RuntimeStackName
        #        TemplatePath: 'Source::infra/runtime.yml'
        #        TemplateConfiguration: 'Source::infra/runtime-config.json'
        #        Capabilities: "CAPABILITY_NAMED_IAM"
        #        RoleArn: !GetAtt CloudFormationServiceRole.Arn
        #        ParameterOverrides: !Sub |
        #          {
        #            "VpcId": "VpcId",
        #            "VpcCidrBlock": "VpcCIDR",
        #            "LoadTestSubnetACidrBlock": "LoadTestSubnetACidrBlock",
        #            "LoadTestSubnetBCidrBlock": "LoadTestSubnetBCidrBlock",
        #            "RouteTableA": "RouteTableA",
        #            "RouteTableB": "RouteTableB",
        #            "Domain": "Domain",
        #            "SourceCodeRepositoryName": "${SourceCodeRepositoryName}",
        #            "ClusterName": "${ClusterName}",
        #            "JMeterServerTaskName": "${JMeterServerTaskName}",
        #            "JMeterClientTaskName": "${JMeterClientTaskName}",
        #            "JMeterServerImage": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServerContainerImageRepository}:latest",
        #            "JMeterClientImage": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ClientContainerImageRepository}:latest"
        #          }
        - Name: "Run"
          Actions:
            - Name: "RunLoadTest"
              InputArtifacts:
                - Name: "Source"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Version: "1"
                Provider: "CodeBuild"
              Configuration:
                ProjectName: !Ref RunLoadTestProjectName
              OutputArtifacts:
                - Name: "LoadTest"
  CodePipelineServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join [ "-", [ !Sub "${AWS::StackName}", !FindInMap [ CONSTRAINTS, CODEPIPELINE, SERVICEROLEPOLICYNAME ]]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                Resource:
                  - "*"
                Effect: "Allow"
              - Action:
                  - "codecommit:CancelUploadArchive"
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:UploadArchive"
                Resource:
                  - "*"
                Effect: "Allow"
              - Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
                Resource:
                  - "*"
                Effect: "Allow"
              - Action:
                  - "elasticbeanstalk:*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                  - "s3:*"
                  - "sns:*"
                  - "cloudformation:*"
                  - "rds:*"
                  - "sqs:*"
                  - "ecs:*"
                  - "iam:PassRole"
                Resource:
                  - "*"
                Effect: "Allow"
              - Action:
                  - "lambda:InvokeFunction"
                  - "lambda:ListFunctions"
                Resource:
                  - "*"
                Effect: "Allow"
              - Action:
                  - "opsworks:CreateDeployment"
                  - "opsworks:DescribeApps"
                  - "opsworks:DescribeCommands"
                  - "opsworks:DescribeDeployments"
                  - "opsworks:DescribeInstances"
                  - "opsworks:DescribeStacks"
                  - "opsworks:UpdateApp"
                  - "opsworks:UpdateStack"
                Resource:
                  - "*"
                Effect: "Allow"
              - Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:SetStackPolicy"
                  - "cloudformation:ValidateTemplate"
                  - "iam:PassRole"
                Resource:
                  - "*"
                Effect: "Allow"
              - Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource:
                  - "*"
                Effect: "Allow"
  CloudFormationServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "cloudformation.amazonaws.com"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
